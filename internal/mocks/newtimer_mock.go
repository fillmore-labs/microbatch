// Copyright 2023-2024 Oliver Eikemeier. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	timer "fillmore-labs.com/microbatch/internal/timer"
)

// MockNewTimer is an autogenerated mock type for the NewTimer type
type MockNewTimer struct {
	mock.Mock
}

type MockNewTimer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewTimer) EXPECT() *MockNewTimer_Expecter {
	return &MockNewTimer_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields: d, f
func (_m *MockNewTimer) New(d time.Duration, f func(*bool)) timer.Timer {
	ret := _m.Called(d, f)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 timer.Timer
	if rf, ok := ret.Get(0).(func(time.Duration, func(*bool)) timer.Timer); ok {
		r0 = rf(d, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(timer.Timer)
		}
	}

	return r0
}

// MockNewTimer_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockNewTimer_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - d time.Duration
//   - f func(*bool)
func (_e *MockNewTimer_Expecter) New(d interface{}, f interface{}) *MockNewTimer_New_Call {
	return &MockNewTimer_New_Call{Call: _e.mock.On("New", d, f)}
}

func (_c *MockNewTimer_New_Call) Run(run func(d time.Duration, f func(*bool))) *MockNewTimer_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(func(*bool)))
	})
	return _c
}

func (_c *MockNewTimer_New_Call) Return(_a0 timer.Timer) *MockNewTimer_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewTimer_New_Call) RunAndReturn(run func(time.Duration, func(*bool)) timer.Timer) *MockNewTimer_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNewTimer creates a new instance of MockNewTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNewTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNewTimer {
	mock := &MockNewTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
