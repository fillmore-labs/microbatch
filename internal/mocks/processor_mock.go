// Copyright 2023-2024 Oliver Eikemeier. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	sync "sync"

	mock "github.com/stretchr/testify/mock"

	types "fillmore-labs.com/microbatch/internal/types"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor[Q interface{}, S interface{}] struct {
	mock.Mock
}

type MockProcessor_Expecter[Q interface{}, S interface{}] struct {
	mock *mock.Mock
}

func (_m *MockProcessor[Q, S]) EXPECT() *MockProcessor_Expecter[Q, S] {
	return &MockProcessor_Expecter[Q, S]{mock: &_m.Mock}
}

// Process provides a mock function with given fields: requests, wg
func (_m *MockProcessor[Q, S]) Process(requests []types.BatchRequest[Q, S], wg *sync.WaitGroup) {
	_m.Called(requests, wg)
}

// MockProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockProcessor_Process_Call[Q interface{}, S interface{}] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - requests []types.BatchRequest[Q,S]
//   - wg *sync.WaitGroup
func (_e *MockProcessor_Expecter[Q, S]) Process(requests interface{}, wg interface{}) *MockProcessor_Process_Call[Q, S] {
	return &MockProcessor_Process_Call[Q, S]{Call: _e.mock.On("Process", requests, wg)}
}

func (_c *MockProcessor_Process_Call[Q, S]) Run(run func(requests []types.BatchRequest[Q, S], wg *sync.WaitGroup)) *MockProcessor_Process_Call[Q, S] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.BatchRequest[Q, S]), args[1].(*sync.WaitGroup))
	})
	return _c
}

func (_c *MockProcessor_Process_Call[Q, S]) Return() *MockProcessor_Process_Call[Q, S] {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessor_Process_Call[Q, S]) RunAndReturn(run func([]types.BatchRequest[Q, S], *sync.WaitGroup)) *MockProcessor_Process_Call[Q, S] {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor[Q interface{}, S interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor[Q, S] {
	mock := &MockProcessor[Q, S]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
