// Copyright 2023-2024 Oliver Eikemeier. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockBatchProcessor is an autogenerated mock type for the BatchProcessor type
type MockBatchProcessor[QQ interface{}, SS interface{}] struct {
	mock.Mock
}

type MockBatchProcessor_Expecter[QQ interface{}, SS interface{}] struct {
	mock *mock.Mock
}

func (_m *MockBatchProcessor[QQ, SS]) EXPECT() *MockBatchProcessor_Expecter[QQ, SS] {
	return &MockBatchProcessor_Expecter[QQ, SS]{mock: &_m.Mock}
}

// ProcessJobs provides a mock function with given fields: jobs
func (_m *MockBatchProcessor[QQ, SS]) ProcessJobs(jobs QQ) (SS, error) {
	ret := _m.Called(jobs)

	if len(ret) == 0 {
		panic("no return value specified for ProcessJobs")
	}

	var r0 SS
	var r1 error
	if rf, ok := ret.Get(0).(func(QQ) (SS, error)); ok {
		return rf(jobs)
	}
	if rf, ok := ret.Get(0).(func(QQ) SS); ok {
		r0 = rf(jobs)
	} else {
		r0 = ret.Get(0).(SS)
	}

	if rf, ok := ret.Get(1).(func(QQ) error); ok {
		r1 = rf(jobs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBatchProcessor_ProcessJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessJobs'
type MockBatchProcessor_ProcessJobs_Call[QQ interface{}, SS interface{}] struct {
	*mock.Call
}

// ProcessJobs is a helper method to define mock.On call
//   - jobs QQ
func (_e *MockBatchProcessor_Expecter[QQ, SS]) ProcessJobs(jobs interface{}) *MockBatchProcessor_ProcessJobs_Call[QQ, SS] {
	return &MockBatchProcessor_ProcessJobs_Call[QQ, SS]{Call: _e.mock.On("ProcessJobs", jobs)}
}

func (_c *MockBatchProcessor_ProcessJobs_Call[QQ, SS]) Run(run func(jobs QQ)) *MockBatchProcessor_ProcessJobs_Call[QQ, SS] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(QQ))
	})
	return _c
}

func (_c *MockBatchProcessor_ProcessJobs_Call[QQ, SS]) Return(_a0 SS, _a1 error) *MockBatchProcessor_ProcessJobs_Call[QQ, SS] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBatchProcessor_ProcessJobs_Call[QQ, SS]) RunAndReturn(run func(QQ) (SS, error)) *MockBatchProcessor_ProcessJobs_Call[QQ, SS] {
	_c.Call.Return(run)
	return _c
}

// NewMockBatchProcessor creates a new instance of MockBatchProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatchProcessor[QQ interface{}, SS interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatchProcessor[QQ, SS] {
	mock := &MockBatchProcessor[QQ, SS]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
